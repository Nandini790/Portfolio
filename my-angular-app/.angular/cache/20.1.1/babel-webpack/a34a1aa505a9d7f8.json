{"ast":null,"code":"import { InjectionToken, EventEmitter, Directive, Inject, PLATFORM_ID, NgZone, ElementRef, KeyValueDiffers, Optional, Input, Output, Component, ViewEncapsulation, ChangeDetectorRef, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport Swiper from 'swiper/bundle';\nconst SWIPER_CONFIG = new InjectionToken('SWIPER_CONFIG');\nconst SwiperEventNames = ['init', 'beforeDestroy', 'scroll', 'progress', 'keyPress', 'resize', 'loopFix', 'breakpoint', 'zoomChange', 'beforeResize', 'beforeLoopFix', 'sliderMove', 'slideChange', 'setTranslate', 'setTransition', 'fromEdge', 'reachEnd', 'reachBeginning', 'autoplay', 'autoplayStop', 'autoplayStart', 'imagesReady', 'lazyImageLoad', 'lazyImageReady', 'scrollbarDragEnd', 'scrollbarDragMove', 'scrollbarDragStart', 'navigationHide', 'navigationShow', 'paginationRender', 'paginationUpdate', 'paginationHide', 'paginationShow', 'swiperTap', 'swiperClick', 'swiperDoubleTap', 'swiperTouchEnd', 'swiperTouchMove', 'swiperTouchStart', 'swiperTouchMoveOpposite', 'swiperTransitionEnd', 'swiperTransitionStart', 'slideNextTransitionEnd', 'slideNextTransitionStart', 'slidePrevTransitionEnd', 'slidePrevTransitionStart', 'slideChangeTransitionEnd', 'slideChangeTransitionStart', 'toEdge', 'observerUpdate'];\nclass SwiperConfig {\n  constructor(config = {}) {\n    this.assign(config);\n  }\n  assign(config = {}, target) {\n    target = target || this;\n    for (const key in config) {\n      if (config[key] != null && !Array.isArray(config[key]) && typeof config[key] === 'object' && (typeof HTMLElement === 'undefined' || !(config[key] instanceof HTMLElement))) {\n        target[key] = {};\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\nclass SwiperDirective {\n  constructor(platformId, zone, elementRef, differs, defaults) {\n    this.platformId = platformId;\n    this.zone = zone;\n    this.elementRef = elementRef;\n    this.differs = differs;\n    this.defaults = defaults;\n    this.initialIndex = null;\n    this.configDiff = null;\n    this.disabled = false;\n    this.performance = false;\n    this.indexChange = new EventEmitter();\n    this.S_INIT = new EventEmitter();\n    this.S_BEFOREDESTROY = new EventEmitter();\n    this.S_SCROLL = new EventEmitter();\n    this.S_PROGRESS = new EventEmitter();\n    this.S_KEYPRESS = new EventEmitter();\n    this.S_RESIZE = new EventEmitter();\n    this.S_BREAKPOINT = new EventEmitter();\n    this.S_ZOOMCHANGE = new EventEmitter();\n    this.S_AFTERRESIZE = new EventEmitter();\n    this.S_BEFORERESIZE = new EventEmitter();\n    this.S_LOOPFIX = new EventEmitter();\n    this.S_BEFORELOOPFIX = new EventEmitter();\n    this.S_SLIDERMOVE = new EventEmitter();\n    this.S_SLIDECHANGE = new EventEmitter();\n    this.S_SETTRANSLATE = new EventEmitter();\n    this.S_SETTRANSITION = new EventEmitter();\n    this.S_FROMEDGE = new EventEmitter();\n    this.S_TOEDGE = new EventEmitter();\n    this.S_REACHEND = new EventEmitter();\n    this.S_REACHBEGINNING = new EventEmitter();\n    this.S_AUTOPLAY = new EventEmitter();\n    this.S_AUTOPLAYSTART = new EventEmitter();\n    this.S_AUTOPLAYSTOP = new EventEmitter();\n    this.S_IMAGESREADY = new EventEmitter();\n    this.S_LAZYIMAGELOAD = new EventEmitter();\n    this.S_LAZYIMAGEREADY = new EventEmitter();\n    this.S_SCROLLDRAGEND = new EventEmitter();\n    this.S_SCROLLDRAGMOVE = new EventEmitter();\n    this.S_SCROLLDRAGSTART = new EventEmitter();\n    this.S_NAVIGATIONHIDE = new EventEmitter();\n    this.S_NAVIGATIONSHOW = new EventEmitter();\n    this.S_PAGINATIONRENDER = new EventEmitter();\n    this.S_PAGINATIONUPDATE = new EventEmitter();\n    this.S_PAGINATIONHIDE = new EventEmitter();\n    this.S_PAGINATIONSHOW = new EventEmitter();\n    this.S_TAP = new EventEmitter();\n    this.S_CLICK = new EventEmitter();\n    this.S_DOUBLETAP = new EventEmitter();\n    this.S_TOUCHEND = new EventEmitter();\n    this.S_TOUCHMOVE = new EventEmitter();\n    this.S_TOUCHSTART = new EventEmitter();\n    this.S_TOUCHMOVEOPPOSITE = new EventEmitter();\n    this.S_TRANSITIONEND = new EventEmitter();\n    this.S_TRANSITIONSTART = new EventEmitter();\n    this.S_SLIDEPREVTRANSITIONEND = new EventEmitter();\n    this.S_SLIDEPREVTRANSITIONSTART = new EventEmitter();\n    this.S_SLIDENEXTTRANSITIONEND = new EventEmitter();\n    this.S_SLIDENEXTTRANSITIONSTART = new EventEmitter();\n    this.S_SLIDECHANGETRANSITIONEND = new EventEmitter();\n    this.S_SLIDECHANGETRANSITIONSTART = new EventEmitter();\n    this.S_OBSERVERUPDATE = new EventEmitter();\n  }\n  set index(index) {\n    if (index != null) {\n      this.setIndex(index);\n    }\n  }\n  ngAfterViewInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    const params = new SwiperConfig(this.defaults);\n    params.assign(this.config); // Custom configuration\n    if (params.scrollbar === true) {\n      params.scrollbar = {\n        el: '.swiper-scrollbar'\n      };\n    }\n    if (params.pagination === true) {\n      params.pagination = {\n        el: '.swiper-pagination'\n      };\n    }\n    if (params.navigation === true) {\n      params.navigation = {\n        prevEl: '.swiper-button-prev',\n        nextEl: '.swiper-button-next'\n      };\n    }\n    if (this.disabled) {\n      params.allowSlidePrev = false;\n      params.allowSlideNext = false;\n    }\n    if (this.initialIndex != null) {\n      params.initialSlide = this.initialIndex;\n      this.initialIndex = null;\n    }\n    params.on = {\n      slideChange: () => {\n        if (this.instance && this.indexChange.observers.length) {\n          this.emit(this.indexChange, this.instance.realIndex);\n        }\n      }\n    };\n    this.zone.runOutsideAngular(() => {\n      this.instance = new Swiper(this.elementRef.nativeElement, params);\n    });\n    if (params.init !== false && this.S_INIT.observers.length) {\n      this.emit(this.S_INIT, this.instance);\n    }\n    // Add native Swiper event handling\n    SwiperEventNames.forEach(eventName => {\n      let swiperEvent = eventName.replace('swiper', '');\n      swiperEvent = swiperEvent.charAt(0).toLowerCase() + swiperEvent.slice(1);\n      this.instance.on(swiperEvent, (...args) => {\n        if (args.length === 1) {\n          args = args[0];\n        }\n        const output = `S_${swiperEvent.toUpperCase()}`;\n        const emitter = this[output];\n        if (emitter.observers.length) {\n          this.emit(emitter, args);\n        }\n      });\n    });\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n      this.configDiff.diff(this.config || {});\n    }\n  }\n  ngOnDestroy() {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.destroy(true, this.instance.initialized || false);\n      });\n      this.instance = null;\n    }\n  }\n  ngDoCheck() {\n    if (this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n      if (changes) {\n        this.initialIndex = this.getIndex(true);\n        this.ngOnDestroy();\n        this.ngAfterViewInit();\n        this.update();\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === true) {\n          this.zone.runOutsideAngular(() => {\n            this.ngOnDestroy();\n            this.ngAfterViewInit();\n          });\n        } else if (changes['disabled'].currentValue === false) {\n          this.zone.runOutsideAngular(() => {\n            this.ngOnDestroy();\n            this.ngAfterViewInit();\n          });\n        }\n      }\n    }\n  }\n  emit(emitter, value) {\n    if (this.performance) {\n      emitter.emit(value);\n    } else {\n      this.zone.run(() => emitter.emit(value));\n    }\n  }\n  swiper() {\n    return this.instance;\n  }\n  init() {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.init();\n      });\n    }\n  }\n  update() {\n    setTimeout(() => {\n      if (this.instance) {\n        this.zone.runOutsideAngular(() => {\n          this.instance.update();\n        });\n      }\n    }, 0);\n  }\n  getIndex(real) {\n    if (!this.instance) {\n      return this.initialIndex || 0;\n    } else {\n      return real ? this.instance.realIndex : this.instance.activeIndex;\n    }\n  }\n  setIndex(index, speed, silent) {\n    if (!this.instance) {\n      this.initialIndex = index;\n    } else {\n      let realIndex = index * this.instance.params.slidesPerGroup;\n      if (this.instance.params.loop) {\n        realIndex += this.instance.loopedSlides;\n      }\n      this.zone.runOutsideAngular(() => {\n        this.instance.slideTo(realIndex, speed, !silent);\n      });\n    }\n  }\n  prevSlide(speed, silent) {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.slidePrev(speed, !silent);\n      });\n    }\n  }\n  nextSlide(speed, silent) {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.slideNext(speed, !silent);\n      });\n    }\n  }\n  stopAutoplay(reset) {\n    if (reset) {\n      this.setIndex(0);\n    }\n    if (this.instance && this.instance.autoplay) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.autoplay.stop();\n      });\n    }\n  }\n  startAutoplay(reset) {\n    if (reset) {\n      this.setIndex(0);\n    }\n    if (this.instance && this.instance.autoplay) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.autoplay.start();\n      });\n    }\n  }\n}\nclass SwiperComponent {\n  constructor(zone, cdRef, platformId, defaults) {\n    this.zone = zone;\n    this.cdRef = cdRef;\n    this.platformId = platformId;\n    this.defaults = defaults;\n    this.mo = null;\n    this.swiperConfig = null;\n    this.paginationBackup = null;\n    this.paginationConfig = null;\n    this.index = null;\n    this.disabled = false;\n    this.performance = false;\n    this.useSwiperClass = true;\n    this.indexChange = new EventEmitter();\n    this.S_INIT = new EventEmitter();\n    this.S_BEFOREDESTROY = new EventEmitter();\n    this.S_SCROLL = new EventEmitter();\n    this.S_PROGRESS = new EventEmitter();\n    this.S_KEYPRESS = new EventEmitter();\n    this.S_RESIZE = new EventEmitter();\n    this.S_BREAKPOINT = new EventEmitter();\n    this.S_ZOOMCHANGE = new EventEmitter();\n    this.S_AFTERRESIZE = new EventEmitter();\n    this.S_BEFORERESIZE = new EventEmitter();\n    this.S_BEFORELOOPFIX = new EventEmitter();\n    this.S_LOOPFIX = new EventEmitter();\n    this.S_SLIDERMOVE = new EventEmitter();\n    this.S_SLIDECHANGE = new EventEmitter();\n    this.S_SETTRANSLATE = new EventEmitter();\n    this.S_SETTRANSITION = new EventEmitter();\n    this.S_FROMEDGE = new EventEmitter();\n    this.S_TOEDGE = new EventEmitter();\n    this.S_REACHEND = new EventEmitter();\n    this.S_REACHBEGINNING = new EventEmitter();\n    this.S_AUTOPLAY = new EventEmitter();\n    this.S_AUTOPLAYSTART = new EventEmitter();\n    this.S_AUTOPLAYSTOP = new EventEmitter();\n    this.S_IMAGESREADY = new EventEmitter();\n    this.S_LAZYIMAGELOAD = new EventEmitter();\n    this.S_LAZYIMAGEREADY = new EventEmitter();\n    this.S_SCROLLDRAGEND = new EventEmitter();\n    this.S_SCROLLDRAGMOVE = new EventEmitter();\n    this.S_SCROLLDRAGSTART = new EventEmitter();\n    this.S_NAVIGATIONHIDE = new EventEmitter();\n    this.S_NAVIGATIONSHOW = new EventEmitter();\n    this.S_PAGINATIONRENDER = new EventEmitter();\n    this.S_PAGINATIONUPDATE = new EventEmitter();\n    this.S_PAGINATIONHIDE = new EventEmitter();\n    this.S_PAGINATIONSHOW = new EventEmitter();\n    this.S_TAP = new EventEmitter();\n    this.S_CLICK = new EventEmitter();\n    this.S_DOUBLETAP = new EventEmitter();\n    this.S_TOUCHEND = new EventEmitter();\n    this.S_TOUCHMOVE = new EventEmitter();\n    this.S_TOUCHSTART = new EventEmitter();\n    this.S_TOUCHMOVEOPPOSITE = new EventEmitter();\n    this.S_TRANSITIONEND = new EventEmitter();\n    this.S_TRANSITIONSTART = new EventEmitter();\n    this.S_SLIDEPREVTRANSITIONEND = new EventEmitter();\n    this.S_SLIDEPREVTRANSITIONSTART = new EventEmitter();\n    this.S_SLIDENEXTTRANSITIONEND = new EventEmitter();\n    this.S_SLIDENEXTTRANSITIONSTART = new EventEmitter();\n    this.S_SLIDECHANGETRANSITIONEND = new EventEmitter();\n    this.S_SLIDECHANGETRANSITIONSTART = new EventEmitter();\n    this.S_OBSERVERUPDATE = new EventEmitter();\n  }\n  get isAtLast() {\n    return !this.directiveRef || !this.directiveRef.swiper() ? false : this.directiveRef.swiper()['isEnd'];\n  }\n  get isAtFirst() {\n    return !this.directiveRef || !this.directiveRef.swiper() ? false : this.directiveRef.swiper()['isBeginning'];\n  }\n  ngAfterViewInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    this.zone.runOutsideAngular(() => {\n      this.updateClasses();\n      if (this.swiperSlides && typeof MutationObserver !== 'undefined') {\n        this.mo = new MutationObserver(() => {\n          this.updateClasses();\n        });\n        this.mo.observe(this.swiperSlides.nativeElement, {\n          childList: true\n        });\n      }\n    });\n    window.setTimeout(() => {\n      if (this.directiveRef) {\n        this.S_INIT.emit();\n        this.directiveRef.indexChange = this.indexChange;\n        SwiperEventNames.forEach(eventName => {\n          if (this.directiveRef) {\n            const output = `S_${eventName.replace('swiper', '').toUpperCase()}`;\n            const directiveOutput = output;\n            const componentOutput = output;\n            this.directiveRef[directiveOutput] = this[componentOutput];\n          }\n        });\n      }\n    }, 0);\n  }\n  ngOnDestroy() {\n    if (this.mo) {\n      this.mo.disconnect();\n    }\n    if (this.config && this.paginationBackup) {\n      this.config.pagination = this.paginationBackup;\n    }\n  }\n  getConfig() {\n    this.swiperConfig = new SwiperConfig(this.defaults);\n    this.swiperConfig.assign(this.config); // Custom configuration\n    if (this.swiperSlides && (this.swiperConfig.pagination === true || this.swiperConfig.pagination && typeof this.swiperConfig.pagination === 'object' && (!this.swiperConfig.pagination.type || this.swiperConfig.pagination.type === 'bullets') && !this.swiperConfig.pagination.renderBullet && this.swiperConfig.pagination.el === '.swiper-pagination')) {\n      this.config = this.config || {};\n      if (!this.paginationConfig) {\n        this.paginationBackup = this.config.pagination;\n        this.paginationConfig = {\n          el: '.swiper-pagination',\n          renderBullet: (index, className) => {\n            let children = this.swiperSlides ? Array.from(this.swiperSlides.nativeElement.children) : [];\n            children = children.filter(child => child.classList.contains('swiper-slide'));\n            let bullet = `<span class=\"${className} ${className}-middle\" index=\"${index}\"></span>`;\n            if (index === 0) {\n              bullet = `<span class=\"${className} ${className}-first\" index=\"${index}\"></span>`;\n            } else if (index === children.length - 1) {\n              bullet = `<span class=\"${className} ${className}-last\" index=\"${index}\"></span>`;\n            }\n            return `<span class=\"swiper-pagination-handle\" index=\"${index}\">${bullet}</span>`;\n          }\n        };\n      }\n      if (this.swiperConfig.pagination === true) {\n        this.config.pagination = this.paginationConfig;\n      } else {\n        this.config.pagination = Object.assign({}, this.config.pagination, this.paginationConfig);\n      }\n    }\n    return this.config;\n  }\n  updateClasses() {\n    if (this.swiperSlides) {\n      let updateNeeded = false;\n      const children = this.swiperSlides.nativeElement.children;\n      for (let i = 0; i < children.length; i++) {\n        if (/swiper-.*/.test(children[i].className) === false) {\n          updateNeeded = true;\n          children[i].classList.add('swiper-slide');\n        }\n      }\n      if (updateNeeded && this.directiveRef) {\n        this.directiveRef.update();\n      }\n    }\n    this.cdRef.detectChanges();\n  }\n  onPaginationClick(index) {\n    if (this.config && this.directiveRef && (this.config.pagination === true || this.config.pagination && typeof this.config.pagination === 'object' && (!this.config.pagination.type || this.config.pagination.type === 'bullets') && this.config.pagination.clickable && this.config.pagination.el === '.swiper-pagination')) {\n      this.directiveRef.setIndex(index);\n    }\n  }\n}\nclass SwiperModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SWIPER_CONFIG, SwiperComponent, SwiperConfig, SwiperDirective, SwiperModule };\n//# sourceMappingURL=ngx-swiper-wrapper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}